apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-static-site-ingress
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-static-site-my-static-site
            port:
              number: 80# Patterns to ignore when building packages.
# This supports shell glob matching, relative path matching, and
# negation (prefixed with !). Only one pattern per line.
.DS_Store
# Common VCS dirs
.git/
.gitignore
.bzr/
.bzrignore
.hg/
.hgignore
.svn/
# Common backup files
*.swp
*.bak
*.tmp
*.orig
*~
# Various IDEs
.project
.idea/
*.tmproj
.vscode/
apiVersion: v2
name: my-static-site
description: A Helm chart for deploying static content via NGINX with autoscaling and monitoring

# Версия чарта — меняйте при изменениях шаблонов
version: 0.1.0

# Минимальная версия Helm
helmVersion: ">=3.0.0"

# Версия приложения (ваша Docker image версия)
appVersion: "1.0.0"

# Ключевые слова для поиска (опционально)
keywords:
  - nginx
  - static
  - web
  - autoscaling
  - prometheus
  - monitoring

# Автор и контакт (опционально)
maintainers:
  - name: Your Name
    email: your.email@example.com

# Лицензия (опционально)
license: MIT
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: nginx-simple-scaler
  namespace: default
spec:
  scaleTargetRef:
    name: my-static-site-my-static-site
  minReplicaCount: 1
  maxReplicaCount: 5
  pollingInterval: 15           
  cooldownPeriod: 30            
  advanced:
    horizontalPodAutoscalerConfig:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 60  
          policies:
          - type: Pods
            value: 1
            periodSeconds: 30   
        scaleUp:
          stabilizationWindowSeconds: 0
          policies:
          - type: Percent
            value: 100
            periodSeconds: 15 
  triggers:
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-stack-kube-prom-prometheus.monitoring.svc:9090
      metricName: nginx_total_requests
      threshold: '5'
      query: 'sum(rate(nginx_ingress_controller_nginx_process_requests_total[2m]))'replicaCount: 1

image:
  repository: my-static-nginx
  tag: latest
  pullPolicy: Never

service:
  type: ClusterIP  
  port: 80

resources:
  requests:
    cpu: 50m      
    memory: 64Mi   
  limits:
    cpu: 100m     
    memory: 128Mi  

grafana:
  expose: true
  nodePort: 30300{{- if .Values.grafana.expose }}
apiVersion: v1
kind: Service
metadata:
  name: grafana-nodeport
  namespace: monitoring
  labels:
    app: grafana-external
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
      nodePort: {{ .Values.grafana.nodePort | default 30300 }}
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prometheus-stack
{{- end }}# templates/deployment.yaml (обновленная версия)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "my-static-site.fullname" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "my-static-site.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "my-static-site.name" . }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: nginx
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: Never
          ports:
            - name: http
              containerPort: 80
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 2
            periodSeconds: 5
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi
        - name: nginx-exporter
          image: nginx/nginx-prometheus-exporter:1.3.0  
          imagePullPolicy: IfNotPresent  
          args:
            - "--nginx.scrape-uri=http://127.0.0.1:80/stub_status"  
          ports:
            - name: metrics
              containerPort: 9113
{{/*
Return the chart name
*/}}
{{- define "my-static-site.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{/*
Return the fullname for the resource
*/}}
{{- define "my-static-site.fullname" -}}
{{- if .Values.fullnameOverride }}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" -}}
{{- else }}
{{- printf "%s-%s" (include "my-static-site.name" .) .Release.Name | trunc 63 | trimSuffix "-" -}}
{{- end -}}
{{- end -}}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "my-static-site.fullname" . }}
  labels:
    app: {{ include "my-static-site.name" . }} 
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
      nodePort: 31693
  selector:
    app: {{ include "my-static-site.name" . }}
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ingress-nginx-controller-metrics
  namespace: ingress-nginx
  labels:
    release: prometheus-stack
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/component: controller
  namespaceSelector:
    matchNames:
    - ingress-nginx
  endpoints:
  - port: prometheus
    interval: 15s
    path: /metrics